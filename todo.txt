
* how do we simplify the class creating and processing code
* one thing i'm seeing a lot of now is stuff like classspec.ident.name... can we prevent so many levels deep?
* should we be looking up classes/types/etc by ID?  Should we be unifying IDs during name binding??  Maybe when defining a variable, we store
  the ID of the AST in the info struct, rather than generate a new one or save the info id in the AST, so we don't have to make AST mut
* this wouldn't work for overloaded functions and methods...  the IDs would be different, and right now, we are storing --- wait what if we stored the ID in the type, which is overloaded???
* how can we separate out the name mangling?  Maybe Ident can have an optional mangled name that we store?  We can always use a refcell, but having one if it's not used sucks

* rename make_object to from_spec?
* remove extraneous Pos's with Ident/Arguments?
* make handy functions for building AST

* for macos, the llvm commands don't have a "-5.0" tag, and they aren't necessarily added to the path.  Maybe the python script can detect that
* it might also make it easier/generic to allow compiling to object files

* how does rust do "use" if there is a circular dependency?
* can you make it compile to the target object file?  So no linking, but it would do optimization and object file output

* add ast element like Struct... which does the same as class build type, but without the vtable stuff, and we can bypass some of the complexity...
  but!!!! could we also/instead factor out the vtables somehow... so that it's more modular/selectable
* there is now an issue with typechecking of hashmap, which doesn't correctly tie the typevars together, and it's has something to do with mapping and the var's name


* there's still a problem with typevars not resolving fully, where a function that should return a concrete returns a free typevar.... (recursion or forward definition)
* either add in the initialization of class variables, possibly limited to constant expressions only, or else raise an error if an initializer is provided
* fix the parser issues where you need nil to make it work.... i think parser parsing ";" into noop/nil might work, if i can get the parser working


* if you had a tuple type, you could use a typevar to represent a tuple of the arguments to a function: Type::Function(Type::Variable(..), Type::Variable(..)) or 'a -> 'b where 'a = ('c, 'd, 'e)
* add an iterator type that gets used in for loops; might need vtables for that

* put intermediate files somewhere else, at least as controlled by the molten script, so as not to clutter source directories


* add compiler directives?
* get llvm closures working
* implement exceptions
* implement garbage collection
* add patterns and matching of patterns
* implement type definition ast element (enum type?)

* better support for generics; right now it just forces everything to/from a pointer type
* fill in string and list type functions, and finish hashmap (rename to dict?)




* if even the global/module scope was a closure, then you could make a module be equivallent to an implicit function that is called when the module is imported, which could have the name of the
  module; so a module called main would become the main() function
* what if you have a 'context' passed to the node visitors that would allow "if" to know if its' return is used or not, and so whether typechecking must match
* if you make ops methods, then everything has to be type annotated, with the type system as it is; you'd need constrained types, or multiple paths, or bidirectional or something
  make typed functions for all math operations, with the inlinealways attribute, if you decide to make operators methods

* is it even possible to add a special "constrained" type, which has &AST that must type check correctly in order to match (checks done in check_type)
* you might need to integrate type restrictions which have to get resolved later; like 'a where 'a is object with add(Int) method; not sure how you could be so specific without complexity
* what if you generalize overloaded types, such that they're checked in check_type, and options are eliminated, or resolved to one type over the course of checking


* should you add access modifiers to classes, and maybe functions; public, private, protected
* should you add break/continue statements for loops
* should you change Real to Float?  also should you change them to lower case names, which is in line with sml, ocmal, f#
* should you allow keyword arguments in invoke; foo(a=10, b=20)
* should you allow arguments with a default value to be omitted from a function call?, that would require a bunch of changes to typechecking
* should you fix scope resolution to also work on objects, so that you can have static methods from the object without explicitly referencing its type
* should exports also list all the modules that the file imports, so that class definitions in other imports can be found, if needed for arguments
* should variables be writable... maybe only with compiler directive, or only without one; if so, add a const expression
* should you add a return statement?  It's not functional, but it's practial
* should you require an override keyword when masking definitions in lower scopes? like class definitions



PARSER:

* issue with separator/lf not working when two expressions are on the same line (it should produce a parse error)
* make nestable comments


FEATURES:

* add dicts syntax
* add macros and expandable forms (like lisp)


EXAMPLE PROGRAMS:

* hash table
* regex matcher


