
* make definitions always require an initializer
* there was an error where "let ni: newint" with no initializer was causing a type error with "expected class or concrete type", but that was actually because a definition without
  an initializer is the same as "let ni: newint = nil" and nil could not be cast to a Record, which newint is a typealias of a record

* limit nested enums to only refs, otherwise it doesn't make sense
* there is an issue with raise, in that it is considered to return unit () instead of somehow being marked as not returning...  Getting type errors in Option def
* the unmapping function doesn't seem to do anything at the moment.  Mapping back causes object-typevar-params test to fail (possibly related to subclass checking?)  We could
  possibly remove most of the unmapping code, or otherwise fix the failed testcase some other way

* make an HIR
* add typeclasses

* should it be allowed to have duplicate decls as long as they are identical types?
* fix modules import system to be less dependent on file paths...
* remove the forced visibility in refinery, when you decide on pub/priv semantics
* make the molten type convert function for mfuncs use the LLType::Exception instead of i8* (remove molten type convert in transform)




BUGS:
* the infer-arg-as-typevar test fails because str() cannot be resolved to a concrete variant by the time it's typechecked (no backwards affect allowed)
* there is still a bug with the Phi statement, in that it will return null if you don't cover all cases. there is no check for coverage
* issue with separator/lf not working when two expressions are on the same line (it should produce a parse error)
* issue with calling function references store in structs or tuples... it converts them to methods incorrectly

* mabye not a bug, but unable to define a method as / MF or / C ABI
* not really a bug, but if you only have one element in a tuple, or in a record, it parses it as a block or expression
* not really a bug, but empty lists cannot be typechecked to concrete types unless it's explicitly provided ("[]" on its own)




Error Messages:
* there is no context info for the ununified variables, which makes it hard to find the issue
* there are poor error messages when deleting the "=" from a "let something = fn x => ..." both inside and outside classes.... shouldn't be doing this (actually, because of
  let without init, and the lf issue... lf fix would solve this)
* you can put a restriction on type aliases such that a type can only use type vars defined in the declaration
* you could require that classes explicitly define their type variables by name, to catch type errors.  So every method or definition in the top level of the class
  could only use explicitly declared type variables
* you might not be making sure that non-closure functions don't access variables outside their scope (methods are never closures)
* make sure that you don't overload different types of functions (closures, functions, and methods must all be the same type to allow overloading)
* should you make mutable modifiers more strict, like rust?



Refactoring:
* it should be possible to remove the &mut in bindings by setting bound types to the id, and using that in the type checking phase instead of the ast type
* if you remove the &mut in bindings, you can make a visitor for all the ast stuff, and possibly make an HIR
* improve storing of file info in the Pos structs (maybe rename to Span?)
* change parser to take session argument or something so it can record the file info, and maybe do other advanced things
* there must be a way to fix the 'scope exceptions' (Scope::target) that we're doing to make class bodies work... pass in an argument to all scoped functions?  or use scopemap and scope ids?
* add the .set_id() functions to simplify ast builders





TESTS:
* test module system (might need a test opt-out for submodules in a test)
* test for static method vtable access, dynamic dispatch via that mechanism, and overloading used with resolve
* error conditions, lack of typing should error, etc
* test that non-closures accessing values outside their scope produces meaningful errors
* test that you don't allow overloading of overlapping function types, and different function types (??)




Changes:
* get hashmap in libcore working
* change how you reference an operator function; like op+ or (+)
* put intermediate files somewhere else, at least as controlled by the molten script, so as not to clutter source directories
* there's no way to genericly compare or print tuples or records

* you really need a better way of doing modules
* how does rust do "use" if there is a circular dependency?
* the module level scope is now a closed function, so you could return a representation of it as the "module" object

* comparisons need to be bools, so you can either force that in type checking or somehow desugar or use the comps style from match, or use typeclasses when added
* you could modify the forloop code to take an iterator in future
* should vtables be dynamically allocated, or should we add a LLType::ElementOf() type or something to GetElement an aliased type
* strings, buffers, and all the primative types require vtables if they have methods, but there aren't vtables stored inside them.  You could make static vtable exceptions for them
* make primative types unable to inherit from, because there's no vtable
* fix lib to allow builtin classes

* can you make a check for nil before unboxing a type... and somehow return an appropriate default value?  I guess that's feasible because only primative types would be
  boxed/unboxed, although records and tuples might be an issue
* when you box a type to be converted to typevar, you can possibly add a vtable of sorts in the process, possibly containing functions and metadata for copying. You could also
  make buffer copying functions that take the element size and copy the buffer data into the boxed location.
* implement return value conversion (this doesn't appear to be needed?  Why didn't it work with tuple closures though?)



* add 'import as' syntax
* add 'decl as' syntax
* add pipe operator
* make loops use phi, and add break
* add proper pattern matching for definitions/matchcases/etc
* add typeclasses/traits
* implement garbage collection
* add an iterator type
* add compiler directives?
* better support for generics






* should you add some means of accessing variant values without pattern matching?
* should you add access modifiers to classes, and maybe functions; public, private, protected
* should module init return something other than 0, like a module object?  Is that even useful?
* should exports also list all the modules that the file imports, so that class definitions in other imports can be found, if needed for arguments
* should you fix scope resolution to also work on objects, so that you can have static methods from the object without explicitly referencing its type
* should you remove the Nil type? (yes, but it'll be a bit tricky)
* should you add break/continue statements for loops
* should you add a return statement?  It's not functional, but it's practial
* should you change Real to Float?  also should you change them to lower case names, which is in line with sml, ocmal, f#
* should you allow keyword arguments in invoke; foo(a=10, b=20)
* should you allow arguments with a default value to be omitted from a function call?, that would require a bunch of changes to typechecking
* should local variables be allowed to be mutable...
* should you require an override keyword when masking definitions in lower scopes? like class definitions
* should you add macros and expandable forms (like lisp)
* should you implement assignment of tuples and records? (in addition to the record update syntax)

* is it even possible to add a special "constrained" type, which has &AST that must type check correctly in order to match (checks done in check_type)
* you might need to integrate type restrictions which have to get resolved later; like 'a where 'a is object with add(Int) method; not sure how you could be so specific without complexity
* what if you generalize overloaded types, such that they're checked in check_type, and options are eliminated, or resolved to one type over the course of checking
* should implement the proper bidirectional typechecker algorithm

* if you make ops methods, then everything has to be type annotated, with the type system as it is; you'd need constrained types, or multiple paths, or bidirectional or something
  make typed functions for all math operations, with the inlinealways attribute, if you decide to make operators methods



EXAMPLE PROGRAM IDEAS:

* hash table
* regex matcher


COMPLETED TESTS (for reference):

* test for references, records, tuples, used in local vars, func args, return values, etc
* test for directly calling functions in records or tuples, which shouldn't add the object argument
* test for records that have different member orders are still equal
* test that raise inside a C function causes a syntax error
* test class init with inherited classes
* test for recursive C functions, recursive MF functions
* parse error with let bar = ref { a = 1, b = 2 } \n (!x).a


