
* issue with mangling currently is held up by forward definitions/recursive definitions, which make the ABI Unknown, which then cannot resolve... but I can't make it
  assume molten abi because sprintf is defined as a typevar because no support for vargs... maybe that can be added to C abi somehow?
* fix error handling of string parser; also is the span adjusting broken too?


* fix invoke anonymous function inline issue in parser
* "match" only works with integers... maybe call ==, but it would have to mangle correctly

* there's still a problem with typevars not resolving fully, where a function that should return a concrete returns a free typevar.... (recursion or forward definition)
* either add in the initialization of class variables, possibly limited to constant expressions only, or else raise an error if an initializer is provided
* fix the parser issues where you need nil to make it work.... i think parser parsing ";" into noop/nil might work, if i can get the parser working
* you need to desugar list creation up front to avoid the specific calls (we can convert them, but why bother if we can reguarlize it; we just need a temp variable...


* if you had a tuple type, you could use a typevar to represent a tuple of the arguments to a function: Type::Function(Type::Variable(..), Type::Variable(..)) or 'a -> 'b where 'a = ('c, 'd, 'e)
* add an iterator type that gets used in for loops; might need vtables for that

* put intermediate files somewhere else, at least as controlled by the molten script, so as not to clutter source directories


* add compiler directives?
* get llvm closures working
* implement exceptions
* implement garbage collection
* add patterns and matching of patterns
* implement type definition ast element (enum type?)

* better support for generics; right now it just forces everything to/from a pointer type
* fill in string and list type functions, and finish hashmap (rename to dict?)




* if even the global/module scope was a closure, then you could make a module be equivallent to an implicit function that is called when the module is imported, which could have the name of the
  module; so a module called main would become the main() function
* what if you a 'context' passed to the node visitors that would allow "if" to know if its' return is used or not, and so whether typechecking must match
* if you make ops methods, then everything has to be type annotated, with the type system as it is; you'd need constrained types, or multiple paths, or bidirectional or something
* make typed functions for all math operations, with the inlinealways attribute, if you decide to make operators methods

* is it even possible to add a special "constrained" type, which has &AST that must type check correctly in order to match (checks done in check_type)
* you might need to integrate type restrictions which have to get resolved later; like 'a where 'a is object with add(Int) method; not sure how you could be so specific without complexity
* what if you generalize overloaded types, such that they're checked in check_type, and options are eliminated, or resolved to one type over the course of checking


* should you change Real to Float?  also should you change them to lower case names, which is in line with sml, ocmal, f#
* should you fix scope resolution to also work on objects, so that you can have static methods from the object without explicitly referencing its type
* should exports also list all the modules that the file imports, so that class definitions in other imports can be found, if needed for arguments
* should variables be writable... maybe only with compiler directive, or only without one; if so, add a const expression
* should you add access modifiers to classes, and maybe functions; public, private, protected
* should you add a return statement?  It's not functional, but it's practial
* should you add break/continue statements for loops
* should you require an override keyword when masking definitions in lower scopes? like class definitions
* should you allow keyword arguments in invoke; foo(a=10, b=20)
* should you allow arguments with a default value to be omitted from a function call?, that would require a bunch of changes to typechecking



PARSER:

* issue with separator/lf not working when two expressions are on the same line (it should produce a parse error)
* make nestable comments


FEATURES:

* add dicts syntax
* add macros and expandable forms (like lisp)


EXAMPLE PROGRAMS:

* hash table
* regex matcher


