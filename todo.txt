
* type checking fails for reducedtest with the resolver disabled, but libcore has problems with it enabled...
* there was no test that caught the failure with reducedtest.  It was a problem with type conversion for Option2
* pattern matching at least for variable assignment, otherwise you can't get an exception return value
* make "with" block of try require parens, at least so they match, and maybe change it to catch? I don't know,  I should have a more consistent means of determining syntax

* there is an issue with raise, in that it is considered to return unit () instead of somehow being marked as not returning...  Getting type errors in Option def
* it's kinda tricky to use a while loop without a break keyword.  Also Rust can break a value out... that would be super useful and make while loops exprs
* remove the forced visibility in refinery, when you decide on pub/priv semantics
* make run function return a module object?  Should it also memoize itself?
* make the molten type convert function for mfuncs use the LLType::Exception instead of i8* (remove molten type convert in transform)

* make an HIR
* improve error checks
* improve type checker
* fix parse issue with subops
* update the readme

* in expoints list, we need to account for function that don't have an expoint arg, like C functions... There needs to be a NoTry state pushed to the list (maybe not, it checks ahead of time)


Typechecking:
* there's still a problem with typevars not resolving fully, where a function that should return a concrete returns a free typevar.... (recursion or forward definition)
* in bindings for functions, maybe we want those to declare typevars as always new? since it's a definition?  But this would be a problem for methods which share class typevars
* Session::resolve_types causing over resolution of types, and commenting it out fixes the type issues in libcore, but what breaks now, without it?


Error Messages:
* there are poor error messages when deleting the "=" from a "let something = fn x => ..." both inside and outside classes.... shouldn't be doing this (actually, because of
  let without init, and the lf issue... lf fix would solve this)
* you can put a restriction on type aliases such that a type can only use type vars defined in the declaration
* you could require that classes explicitly define their type variables by name, to catch type errors.  So every method or definition in the top level of the class
  could only use explicitly declared type variables
* you might not be making sure that non-closure functions don't access variables outside their scope (methods are never closures)
* make sure that you don't overload different types of functions (closures, functions, and methods must all be the same type to allow overloading)
* should you make mutable modifiers more strict, like rust?



Refactoring:
* should you process imports in refinery instead of binding
* modify resolve to return a result rather than unwrapping
* improve storing of file info in the Pos structs (maybe rename to Span?)
* change parser to take session argument or something so it can record the file info, and maybe do other advanced things
* there must be a way to fix the 'scope exceptions' (Scope::target) that we're doing to make class bodies work... pass in an argument to all scoped functions?  or use scopemap and scope ids?
* add the .set_id() functions to simpliy ast builders



BUGS:
* there is still a bug with the Phi statement, in that it will return null if you don't cover all cases. there is no check for coverage
* recursive c functions don't work because it's typechecked as unknown abi, which is called as a closure
* issue with separator/lf not working when two expressions are on the same line (it should produce a parse error)
* if there are brackets after a record literal, it will try to call it as a function: let bar = ref { a = 1, b = 2 } \n (!x).a    parses incorrectly,
  but adding a semi-colon will fix it.  It tries to parse through the line terminator
* issue with calling function references store in structs or tuples... it converts them to methods incorrectly
* if you only have one element in a tuple, or in a record, it parses it as a block or expression
* there was an error where "let ni: newint" with no initializer was causing a type error with "expected class or concrete type", but that was actually because a definition without
  an initializer is the same as "let ni: newint = nil" and nil could not be cast to a Record, which newint is a typealias of a record
* minor bug caught by abi test; the printf function had been added in declare_irregulars, but was decl'ed in the test, and it caused a segfault because you call an undefined function "printf.1"



TESTS:
* test module system (might need a test opt-out for submodules in a test)
* test for static method vtable access, dynamic dispatch via that mechanism, and overloading used with resolve
* error conditions, lack of typing should error, etc
* test that non-closures accessing values outside their scope produces meaningful errors
* test that you don't allow overloading of overlapping function types, and different function types (??)




Changes:
* change how you reference an operator function; like op+ or (+)

* you really need a better way of doing modules
* it might also make it easier/generic to allow compiling to object files?  So no linking, but it would do optimization and object file output
* how does rust do "use" if there is a circular dependency?
* put intermediate files somewhere else, at least as controlled by the molten script, so as not to clutter source directories
* the module level scope is now a closed function, so you could return a representation of it as the "module" object

* if, sideeffects, and while loops need bool comparison results to work correctly.  You can either force that in type checking or somehow desugar or use the comps style from match
* unable to define a method as / MF or / C ABI
* make an "as" for of decl, like decl buffer_resize as resize: () -> ??
* you could modify the forloop code to take an iterator in future
* should vtables be dynamically allocated, or should we add a LLType::ElementOf() type or something to GetElement an aliased type
* should compare use a trait/typeclass? that would have to come later

* strings, buffers, and all the primative types require vtables if they have methods, but there aren't vtables stored inside them.  You could make static vtable exceptions for them
* make primative types unable to inherit from, because there's no vtable
* fix lib to allow builtin classes

* when you box a type to be converted to typevar, you can possibly add a vtable of sorts in the process, possibly containing functions and metadata for copying. You could also
  make buffer copying functions that take the element size and copy the buffer data into the boxed location.
* there's no way to genericly compare or print tuples or records
* can you make a check for nil before unboxing a type... and somehow return an appropriate default value?  I guess that's feasible because only primative types would be
  boxed/unboxed, although records and tuples might be an issue
* implement return value conversion (this doesn't appear to be needed?  Why didn't it work with tuple closures though?)

* fill in string and list type functions, and finish hashmap (rename to dict?)



* implement enums
* add a spread operator for records
* add patterns and matching of patterns
* add typeclasses/traits
* implement garbage collection
* add an iterator type
* implement assignment of tuples and records? (or only spread operator)
* add compiler directives?






* should you add access modifiers to classes, and maybe functions; public, private, protected
* should exports also list all the modules that the file imports, so that class definitions in other imports can be found, if needed for arguments
* should you fix scope resolution to also work on objects, so that you can have static methods from the object without explicitly referencing its type
* should you remove the Nil type? (yes, but it'll be a bit tricky)
* should you add break/continue statements for loops
* should you add a return statement?  It's not functional, but it's practial
* should you change Real to Float?  also should you change them to lower case names, which is in line with sml, ocmal, f#
* should you allow keyword arguments in invoke; foo(a=10, b=20)
* should you allow arguments with a default value to be omitted from a function call?, that would require a bunch of changes to typechecking
* should local variables be allowed to be mutable...
* should you require an override keyword when masking definitions in lower scopes? like class definitions
* should you add macros and expandable forms (like lisp)

* is it even possible to add a special "constrained" type, which has &AST that must type check correctly in order to match (checks done in check_type)
* you might need to integrate type restrictions which have to get resolved later; like 'a where 'a is object with add(Int) method; not sure how you could be so specific without complexity
* what if you generalize overloaded types, such that they're checked in check_type, and options are eliminated, or resolved to one type over the course of checking
* if you make ops methods, then everything has to be type annotated, with the type system as it is; you'd need constrained types, or multiple paths, or bidirectional or something
  make typed functions for all math operations, with the inlinealways attribute, if you decide to make operators methods
* what if you have a 'context' passed to the node visitors that would allow "if" to know if its' return is used or not, and so whether typechecking must match

* better support for generics


EXAMPLE PROGRAM IDEAS:

* hash table
* regex matcher


COMPLETED TESTS (for reference):

* test for references, records, tuples, used in local vars, func args, return values, etc
* test for directly calling functions in records or tuples, which shouldn't add the object argument
* test for records that have different member orders are still equal
* test that raise inside a C function causes a syntax error
* test class init with inherited classes
* test for recursive C functions, recursive MF functions
* parse error with let bar = ref { a = 1, b = 2 } \n (!x).a


